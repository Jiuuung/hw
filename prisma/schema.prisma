// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

model User {
  id    Int     @default(autoincrement()) @id
  email String @unique
  password String
  first_name String
  last_name String
  imgUrl String?
  refresh_token String?
  anonymous Boolean @default(true)
  spaces UsersInSpaces[]
  post Post[]
  chat Chat[]
}

model Space{
  id Int @default(autoincrement()) @id
  name String @unique
  isDeleted Boolean @default(false)
  access_code_manager String
  access_code_participation String
  users UsersInSpaces[]
  role Role[]
  post Post[]
  chat Chat[]
}

enum Auth{
  USER
  ADMIN
}
model Role {
  id Int @default(autoincrement()) @id
  name String
  auth Auth @default(USER)
  isDeleted Boolean @default(false)
  userinspace UsersInSpaces[]
  spacerole Space @relation(fields: [spacename], references:[name], onDelete: Cascade)
  spacename String
  @@unique(fields: [name, spacename], name: "roleinspace")
}

model UsersInSpaces{
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)
  userId Int
  space Space @relation(fields: [spaceId], references:[id], onDelete: Cascade)
  spaceId Int
  role Role @relation(fields: [roleId], references:[id],onDelete: Cascade)
  roleId Int
  @@unique(fields: [userId, spaceId], name:"userspace")
  @@id([userId, spaceId,roleId])
}

model Post{
  id Int @default(autoincrement()) @id
  title String
  content String
  author User @relation(fields: [authoremail], references:[email], onDelete: Cascade)
  authoremail String
  space Space @relation(fields: [spacename], references:[name], onDelete: Cascade)
  spacename String
  isAnonymous Boolean @default(false)
  isNotice Boolean @default(false)
  isDeleted Boolean @default(false)
  fileurl String?
  chat Chat[]
}
model Chat{
  id Int @default(autoincrement()) @id
  content String
  author User @relation(fields: [authoremail], references:[email], onDelete: Cascade)
  authoremail String
  space Space @relation(fields: [spacename], references:[name], onDelete: Cascade)
  spacename String
  post Post @relation(fields: [postId], references:[id], onDelete: Cascade)
  postId Int
  isAnonymous Boolean @default(false)
  isDeleted Boolean @default(false)
  chat Chat[] @relation("chat")
  parent Chat? @relation("chat", fields: [parentId], references: [id])
  parentId Int? @map("chatid")
  rootChat Chat[] @relation("root")
  root Chat? @relation("root", fields: [rootId], references: [id])
  rootId Int? @map("rootchatid")
  level Int @default(0)
  order Int @default(0)
  answerNum Int @default(0)
  @@unique(fields: [id, isDeleted], name:"validchat")
}
